syntax = "proto3";

option go_package = "pkg/auth";

import  "google/protobuf/empty.proto";

// Service for auth processes
service AuthService {
    // Login method for requesting access token from edu platform
    rpc Login (LoginRequest) returns (LoginResponse) {};
    rpc CheckEmailAvailability(CheckEmailAvailabilityIn) returns (CheckEmailAvailabilityOut) {};
    // Send verification code to email and save data into pending table
    rpc SendUserVerificationCode (SendUserVerificationCodeIn) returns (SendUserVerificationCodeOut) {};
    rpc RegisterUser (RegisterUserIn) returns (google.protobuf.Empty) {};
    rpc LoginV2 (LoginV2In) returns (LoginV2Out) {};
}

// Data for request JWT token for all access in our platform
message LoginRequest {
    // username can be just nickname or full email (nickanme@student.21-school.ru)
    string username = 1;
    // password from platform
    string password = 2;
}

// response JWT token for access
message LoginResponse {
    // String with jwt
    string jwt = 1;
}

message CheckEmailAvailabilityIn {
    string email = 1;
}

message CheckEmailAvailabilityOut {
    bool is_available = 1;
}

// Data for save in pending table
message SendUserVerificationCodeIn {
    // email to send code
    string email = 1;
}

// Response for SendCode
message SendUserVerificationCodeOut {
    // UUID of record from pending table
    string uuid = 1;
}

message RegisterUserIn {
    string email = 1;
    string password = 2;
    string confirm_password = 3;
    string code = 4;
    string code_lookup_uuid = 5; // UUID to look up the original verification code in pending_registrations
}

message LoginV2In {
    string login = 1;
    string password = 2;
}

message LoginV2Out {
    string access_token = 1;
    string refresh_token = 2;
}

// kafka contracts
message NewUserRegister {
    string uuid = 1;
    string nickname = 2;
}
