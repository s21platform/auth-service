// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/s21platform/auth-service/internal/model"
	user "github.com/s21platform/user-service/pkg/user"
)

// MockDBRepo is a mock of DBRepo interface.
type MockDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepoMockRecorder
}

// MockDBRepoMockRecorder is the mock recorder for MockDBRepo.
type MockDBRepoMockRecorder struct {
	mock *MockDBRepo
}

// NewMockDBRepo creates a new mock instance.
func NewMockDBRepo(ctrl *gomock.Controller) *MockDBRepo {
	mock := &MockDBRepo{ctrl: ctrl}
	mock.recorder = &MockDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepo) EXPECT() *MockDBRepoMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockDBRepo) CreateSession(ctx context.Context, session *model.Session) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockDBRepoMockRecorder) CreateSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDBRepo)(nil).CreateSession), ctx, session)
}

// GetSessionByRefreshToken mocks base method.
func (m *MockDBRepo) GetSessionByRefreshToken(ctx context.Context, refreshTokenHash string) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByRefreshToken", ctx, refreshTokenHash)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByRefreshToken indicates an expected call of GetSessionByRefreshToken.
func (mr *MockDBRepoMockRecorder) GetSessionByRefreshToken(ctx, refreshTokenHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByRefreshToken", reflect.TypeOf((*MockDBRepo)(nil).GetSessionByRefreshToken), ctx, refreshTokenHash)
}

// GetUserByEmail mocks base method.
func (m *MockDBRepo) GetUserByEmail(ctx context.Context, email string) (*model.PlatformAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.PlatformAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDBRepoMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDBRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByNickname mocks base method.
func (m *MockDBRepo) GetUserByNickname(ctx context.Context, nickname string) (*model.PlatformAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByNickname", ctx, nickname)
	ret0, _ := ret[0].(*model.PlatformAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByNickname indicates an expected call of GetUserByNickname.
func (mr *MockDBRepoMockRecorder) GetUserByNickname(ctx, nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByNickname", reflect.TypeOf((*MockDBRepo)(nil).GetUserByNickname), ctx, nickname)
}

// GetUserByUUID mocks base method.
func (m *MockDBRepo) GetUserByUUID(ctx context.Context, uuid string) (*model.PlatformAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", ctx, uuid)
	ret0, _ := ret[0].(*model.PlatformAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID.
func (mr *MockDBRepoMockRecorder) GetUserByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*MockDBRepo)(nil).GetUserByUUID), ctx, uuid)
}

// GetVerificationCode mocks base method.
func (m *MockDBRepo) GetVerificationCode(ctx context.Context, codeLookupUUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationCode", ctx, codeLookupUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationCode indicates an expected call of GetVerificationCode.
func (mr *MockDBRepoMockRecorder) GetVerificationCode(ctx, codeLookupUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationCode", reflect.TypeOf((*MockDBRepo)(nil).GetVerificationCode), ctx, codeLookupUUID)
}

// InsertPendingRegistration mocks base method.
func (m *MockDBRepo) InsertPendingRegistration(ctx context.Context, email, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPendingRegistration", ctx, email, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPendingRegistration indicates an expected call of InsertPendingRegistration.
func (mr *MockDBRepoMockRecorder) InsertPendingRegistration(ctx, email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPendingRegistration", reflect.TypeOf((*MockDBRepo)(nil).InsertPendingRegistration), ctx, email, code)
}

// IsEmailAvailable mocks base method.
func (m *MockDBRepo) IsEmailAvailable(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailAvailable", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailAvailable indicates an expected call of IsEmailAvailable.
func (mr *MockDBRepoMockRecorder) IsEmailAvailable(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailAvailable", reflect.TypeOf((*MockDBRepo)(nil).IsEmailAvailable), ctx, email)
}

// SaveNewUser mocks base method.
func (m *MockDBRepo) SaveNewUser(ctx context.Context, account *model.PlatformAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewUser", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewUser indicates an expected call of SaveNewUser.
func (mr *MockDBRepoMockRecorder) SaveNewUser(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewUser", reflect.TypeOf((*MockDBRepo)(nil).SaveNewUser), ctx, account)
}

// MockSchoolS is a mock of SchoolS interface.
type MockSchoolS struct {
	ctrl     *gomock.Controller
	recorder *MockSchoolSMockRecorder
}

// MockSchoolSMockRecorder is the mock recorder for MockSchoolS.
type MockSchoolSMockRecorder struct {
	mock *MockSchoolS
}

// NewMockSchoolS creates a new mock instance.
func NewMockSchoolS(ctrl *gomock.Controller) *MockSchoolS {
	mock := &MockSchoolS{ctrl: ctrl}
	mock.recorder = &MockSchoolSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchoolS) EXPECT() *MockSchoolSMockRecorder {
	return m.recorder
}

// DoLogin mocks base method.
func (m *MockSchoolS) DoLogin(ctx context.Context, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoLogin", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoLogin indicates an expected call of DoLogin.
func (mr *MockSchoolSMockRecorder) DoLogin(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoLogin", reflect.TypeOf((*MockSchoolS)(nil).DoLogin), ctx, email, password)
}

// MockCommunityS is a mock of CommunityS interface.
type MockCommunityS struct {
	ctrl     *gomock.Controller
	recorder *MockCommunitySMockRecorder
}

// MockCommunitySMockRecorder is the mock recorder for MockCommunityS.
type MockCommunitySMockRecorder struct {
	mock *MockCommunityS
}

// NewMockCommunityS creates a new mock instance.
func NewMockCommunityS(ctrl *gomock.Controller) *MockCommunityS {
	mock := &MockCommunityS{ctrl: ctrl}
	mock.recorder = &MockCommunitySMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityS) EXPECT() *MockCommunitySMockRecorder {
	return m.recorder
}

// CheckPeer mocks base method.
func (m *MockCommunityS) CheckPeer(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPeer", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPeer indicates an expected call of CheckPeer.
func (mr *MockCommunitySMockRecorder) CheckPeer(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPeer", reflect.TypeOf((*MockCommunityS)(nil).CheckPeer), ctx, email)
}

// MockUserS is a mock of UserS interface.
type MockUserS struct {
	ctrl     *gomock.Controller
	recorder *MockUserSMockRecorder
}

// MockUserSMockRecorder is the mock recorder for MockUserS.
type MockUserSMockRecorder struct {
	mock *MockUserS
}

// NewMockUserS creates a new mock instance.
func NewMockUserS(ctrl *gomock.Controller) *MockUserS {
	mock := &MockUserS{ctrl: ctrl}
	mock.recorder = &MockUserSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserS) EXPECT() *MockUserSMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserS) CreateUser(ctx context.Context, email string) (*user.CreateUserOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email)
	ret0, _ := ret[0].(*user.CreateUserOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserSMockRecorder) CreateUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserS)(nil).CreateUser), ctx, email)
}

// GetOrSetUser mocks base method.
func (m *MockUserS) GetOrSetUser(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrSetUser", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrSetUser indicates an expected call of GetOrSetUser.
func (mr *MockUserSMockRecorder) GetOrSetUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrSetUser", reflect.TypeOf((*MockUserS)(nil).GetOrSetUser), ctx, email)
}

// MockNotificationS is a mock of NotificationS interface.
type MockNotificationS struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationSMockRecorder
}

// MockNotificationSMockRecorder is the mock recorder for MockNotificationS.
type MockNotificationSMockRecorder struct {
	mock *MockNotificationS
}

// NewMockNotificationS creates a new mock instance.
func NewMockNotificationS(ctrl *gomock.Controller) *MockNotificationS {
	mock := &MockNotificationS{ctrl: ctrl}
	mock.recorder = &MockNotificationSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationS) EXPECT() *MockNotificationSMockRecorder {
	return m.recorder
}

// SendVerificationCode mocks base method.
func (m *MockNotificationS) SendVerificationCode(ctx context.Context, email, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationCode", ctx, email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationCode indicates an expected call of SendVerificationCode.
func (mr *MockNotificationSMockRecorder) SendVerificationCode(ctx, email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationCode", reflect.TypeOf((*MockNotificationS)(nil).SendVerificationCode), ctx, email, code)
}

// MockKafkaProducer is a mock of KafkaProducer interface.
type MockKafkaProducer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProducerMockRecorder
}

// MockKafkaProducerMockRecorder is the mock recorder for MockKafkaProducer.
type MockKafkaProducerMockRecorder struct {
	mock *MockKafkaProducer
}

// NewMockKafkaProducer creates a new mock instance.
func NewMockKafkaProducer(ctrl *gomock.Controller) *MockKafkaProducer {
	mock := &MockKafkaProducer{ctrl: ctrl}
	mock.recorder = &MockKafkaProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProducer) EXPECT() *MockKafkaProducerMockRecorder {
	return m.recorder
}

// ProduceMessage mocks base method.
func (m *MockKafkaProducer) ProduceMessage(ctx context.Context, message, key interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceMessage", ctx, message, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceMessage indicates an expected call of ProduceMessage.
func (mr *MockKafkaProducerMockRecorder) ProduceMessage(ctx, message, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceMessage", reflect.TypeOf((*MockKafkaProducer)(nil).ProduceMessage), ctx, message, key)
}
